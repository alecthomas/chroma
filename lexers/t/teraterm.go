package t

import (
	"regexp"
	"strings"

	. "github.com/alecthomas/chroma" // nolint
	"github.com/alecthomas/chroma/lexers/internal"
)

var teraTermAnalyserCommandRe = regexp.MustCompile(`(?i)\b(` + strings.Join([]string{
	"basename",
	"beep",
	"bplusrecv",
	"bplussend",
	"break",
	"bringupbox",
	// 'call' is handled separately.
	"callmenu",
	"changedir",
	"checksum16",
	"checksum16file",
	"checksum32",
	"checksum32file",
	"checksum8",
	"checksum8file",
	"clearscreen",
	"clipb2var",
	"closesbox",
	"closett",
	"code2str",
	"connect",
	"continue",
	"crc16",
	"crc16file",
	"crc32",
	"crc32file",
	"cygconnect",
	"delpassword",
	"dirname",
	"dirnamebox",
	"disconnect",
	"dispstr",
	"do",
	"else",
	"elseif",
	"enablekeyb",
	"end",
	"endif",
	"enduntil",
	"endwhile",
	"exec",
	"execcmnd",
	"exit",
	"expandenv",
	"fileclose",
	"fileconcat",
	"filecopy",
	"filecreate",
	"filedelete",
	"filelock",
	"filemarkptr",
	"filenamebox",
	"fileopen",
	"fileread",
	"filereadln",
	"filerename",
	"filesearch",
	"fileseek",
	"fileseekback",
	"filestat",
	"filestrseek",
	"filestrseek2",
	"filetruncate",
	"fileunlock",
	"filewrite",
	"filewriteln",
	"findclose",
	"findfirst",
	"findnext",
	"flushrecv",
	"foldercreate",
	"folderdelete",
	"foldersearch",
	"for",
	"getdate",
	"getdir",
	"getenv",
	"getfileattr",
	"gethostname",
	"getipv4addr",
	"getipv6addr",
	"getmodemstatus",
	"getpassword",
	"getspecialfolder",
	"gettime",
	"gettitle",
	"getttdir",
	"getver",
	// 'goto' is handled separately.
	"if",
	"ifdefined",
	"include",
	"inputbox",
	"int2str",
	"intdim",
	"ispassword",
	"kmtfinish",
	"kmtget",
	"kmtrecv",
	"kmtsend",
	"listbox",
	"loadkeymap",
	"logautoclosemode",
	"logclose",
	"loginfo",
	"logopen",
	"logpause",
	"logrotate",
	"logstart",
	"logwrite",
	"loop",
	"makepath",
	"messagebox",
	"mpause",
	"next",
	"passwordbox",
	"pause",
	"quickvanrecv",
	"quickvansend",
	"random",
	"recvln",
	"regexoption",
	"restoresetup",
	"return",
	"rotateleft",
	"rotateright",
	"scprecv",
	"scpsend",
	"send",
	"sendbreak",
	"sendbroadcast",
	"sendfile",
	"sendkcode",
	"sendln",
	"sendlnbroadcast",
	"sendlnmulticast",
	"sendmulticast",
	"setbaud",
	"setdate",
	"setdebug",
	"setdir",
	"setdlgpos",
	"setdtr",
	"setecho",
	"setenv",
	"setexitcode",
	"setfileattr",
	"setflowctrl",
	"setmulticastname",
	"setpassword",
	"setrts",
	"setspeed",
	"setsync",
	"settime",
	"settitle",
	"show",
	"showtt",
	"sprintf",
	"sprintf2",
	"statusbox",
	"str2code",
	"str2int",
	"strcompare",
	"strconcat",
	"strcopy",
	"strdim",
	"strinsert",
	"strjoin",
	"strlen",
	"strmatch",
	"strremove",
	"strreplace",
	"strscan",
	"strspecial",
	"strsplit",
	"strtrim",
	"testlink",
	"then",
	"tolower",
	"toupper",
	"unlink",
	"until",
	"uptime",
	"var2clipb",
	"wait",
	"wait4all",
	"waitevent",
	"waitln",
	"waitn",
	"waitrecv",
	"waitregex",
	"while",
	"xmodemrecv",
	"xmodemsend",
	"yesnobox",
	"ymodemrecv",
	"ymodemsend",
	"zmodemrecv",
	"zmodemsend",
}, "|") + `)\b`)

// Tera Term macro lexer.
var TeraTerm = internal.Register(MustNewLexer(
	&Config{
		Name:      "Tera Term macro",
		Aliases:   []string{"ttl", "teraterm", "teratermmacro"},
		Filenames: []string{"*.ttl"},
		MimeTypes: []string{"text/x-teratermmacro"},
	},
	Rules{
		"root": {},
	},
).SetAnalyser(func(text string) float32 {
	// Turtle and Tera Term macro files share the same file extension
	// but each has a recognizable and distinct syntax.
	if teraTermAnalyserCommandRe.MatchString(text) {
		return 0.01
	}

	return 0
}))
